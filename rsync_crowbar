#!/bin/bash
#
# sync barclamps from local git checkout to the crobar admin node
#

GITHOST="$1.suse.de"
BARCLAMP=$2
DEST_FOLDER=$3
UPLOAD=$4
VM_BASE=/opt/dell/chef
GIT_BASE=/home/cloud/MaximilianMeister/barclamp-$BARCLAMP/chef
ALL=(attributes recipes roles)
BCS=(database keystone rabbitmq ceph swift glance cinder neutron nova nova_dashboard ceilometer heat)

function usage {
  echo "usage: $0 githost barclamp folder [upload]"
  echo "or:    $0 githost nuke (deploy all barclamps)"
}

if [ ! -d "/opt/dell" ]
then
  echo "Not on a crowbar admin node"
  exit 1
fi

# deploy all barclamps to admin node
if [ "$2" == "nuke" ]
then
  for bc in "${BCS[@]}"
  do
    for folder in "${ALL[@]}"
    do
      bash $0 $1 $bc $folder "up"
    done
  done
  exit 0
fi

if [ $# -lt 3 ] || [ $# -gt 4 ]
then
  usage $0
  exit 0
fi

# check which folder needs to be synced
# there are: /opt/dell/chef/cookbooks/$BC/attributes
#            /opt/dell/chef/cookbooks/$BC/recipes
#            /opt/dell/chef/roles
case $DEST_FOLDER in
  'a'|'attr'|'attributes')
    SERVICE_PATH=$(ssh root@$GITHOST "cd $GIT_BASE; find . -name default.rb | grep attributes | sed 's/^.//'")
    case $BARCLAMP in
      'database')
        for a in $SERVICE_PATH; do
          if [[ $a == *mysql* ]]
          then 
            continue
          else
            rsync -v -e ssh root@$GITHOST:$GIT_BASE$a $VM_BASE/cookbooks/$BARCLAMP/attributes
          fi
        done
      ;;
      *)
        rsync -v -e ssh root@$GITHOST:$GIT_BASE$SERVICE_PATH $VM_BASE$SERVICE_PATH
    esac
  ;;
  're'|'recipes')
    RECIPE_PATH=$(ssh root@$GITHOST "cd $GIT_BASE; find . -name deactivate*.rb | sed 's/^.//'")
    for re in $RECIPE_PATH; do
      if [[ $BARCLAMP == "database" ]] && [[ $re != *mysql* ]]
      then
        rsync -v -e ssh root@$GITHOST:$GIT_BASE$re $VM_BASE/cookbooks/$BARCLAMP/recipes
        continue
      else
        rsync -v -e ssh root@$GITHOST:$GIT_BASE$re $VM_BASE$re
      fi
    done
  ;;
  'ro'|'roles')
    ROLE_PATH=$(ssh root@$GITHOST "cd $GIT_BASE; find . -name $BARCLAMP*_remove.rb | sed 's/^.//'")
    for ro in $ROLE_PATH; do
      rsync -v -e ssh root@$GITHOST:$GIT_BASE$ro $VM_BASE$ro
    done
  ;;
  'lwrp')
    LWRP_PATH=$(ssh root@$GITHOST "cd $GIT_BASE; find . -name role.rb | sed 's/^.//'")
    RESOURCE_DIR=/cookbooks/barclamp/resources
    PROVIDE_DIR=/cookbooks/barclamp/providers
    if [ ! -d $VM_BASE$RESOURCE_DIR ]
    then
      mkdir $VM_BASE$RESOURCE_DIR
      mkdir $VM_BASE$PROVIDE_DIR
    fi
    for lwrp in $LWRP_PATH; do
      rsync -v -e ssh root@$GITHOST:$GIT_BASE$lwrp $VM_BASE$lwrp
    done
    BARCLAMP="barclamp"
  ;;
  'databag')
    BAG_PATH=$(ssh root@$GITHOST "cd $GIT_BASE; find . -name bc-template-$BARCLAMP.json | sed 's/^.//'")
    MIGRATION_PATH=$(ssh root@$GITHOST "cd $GIT_BASE; find . -name 011_change_role_removal_priority.rb | sed 's/^.//'")
    rsync -v -e ssh root@$GITHOST:$GIT_BASE$BAG_PATH $VM_BASE$BAG_PATH
    rsync -v -e ssh root@$GITHOST:$GIT_BASE$MIGRATION_PATH $VM_BASE$MIGRATION_PATH
  ;;
  'all')
    for i in "${ALL[@]}"
    do
      bash $0 $1 $2 $i $4
    done
  ;;
  *)
   usage $0
   exit 0
  ;;
esac

#upload cookbook and role
case $UPLOAD in
  'upload'|'up')
    echo "uploading cookbook $BARCLAMP"
    knife cookbook upload -o $VM_BASE/cookbooks $BARCLAMP
    echo "uploading role $BARCLAMP"
    knife role from file $VM_BASE/roles/$BARCLAMP*_remove.rb
  ;;
  *)
    echo "not uploading cookbooks and roles"
    exit 0
  ;;
esac

exit 0
